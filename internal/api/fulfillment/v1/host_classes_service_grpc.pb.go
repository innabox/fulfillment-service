//
// Copyright (c) 2025 Red Hat, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: fulfillment/v1/host_classes_service.proto

package fulfillmentv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HostClasses_List_FullMethodName   = "/fulfillment.v1.HostClasses/List"
	HostClasses_Get_FullMethodName    = "/fulfillment.v1.HostClasses/Get"
	HostClasses_Create_FullMethodName = "/fulfillment.v1.HostClasses/Create"
	HostClasses_Update_FullMethodName = "/fulfillment.v1.HostClasses/Update"
	HostClasses_Delete_FullMethodName = "/fulfillment.v1.HostClasses/Delete"
)

// HostClassesClient is the client API for HostClasses service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HostClassesClient interface {
	// Retrieves the list of host classes.
	List(ctx context.Context, in *HostClassesListRequest, opts ...grpc.CallOption) (*HostClassesListResponse, error)
	// Retrieves the details of one specific host classes.
	Get(ctx context.Context, in *HostClassesGetRequest, opts ...grpc.CallOption) (*HostClassesGetResponse, error)
	// Creates a new host class.
	//
	// This method isn't allowed for regular users, only for the system itself.
	Create(ctx context.Context, in *HostClassesCreateRequest, opts ...grpc.CallOption) (*HostClassesCreateResponse, error)
	// Updates an existint host class.
	//
	// This method isn't allowed for regular users, only for the system itself.
	Update(ctx context.Context, in *HostClassesUpdateRequest, opts ...grpc.CallOption) (*HostClassesUpdateResponse, error)
	// Delete a host class.
	//
	// This method isn't allowed for regular users, only for the system itself.
	Delete(ctx context.Context, in *HostClassesDeleteRequest, opts ...grpc.CallOption) (*HostClassesDeleteResponse, error)
}

type hostClassesClient struct {
	cc grpc.ClientConnInterface
}

func NewHostClassesClient(cc grpc.ClientConnInterface) HostClassesClient {
	return &hostClassesClient{cc}
}

func (c *hostClassesClient) List(ctx context.Context, in *HostClassesListRequest, opts ...grpc.CallOption) (*HostClassesListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HostClassesListResponse)
	err := c.cc.Invoke(ctx, HostClasses_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostClassesClient) Get(ctx context.Context, in *HostClassesGetRequest, opts ...grpc.CallOption) (*HostClassesGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HostClassesGetResponse)
	err := c.cc.Invoke(ctx, HostClasses_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostClassesClient) Create(ctx context.Context, in *HostClassesCreateRequest, opts ...grpc.CallOption) (*HostClassesCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HostClassesCreateResponse)
	err := c.cc.Invoke(ctx, HostClasses_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostClassesClient) Update(ctx context.Context, in *HostClassesUpdateRequest, opts ...grpc.CallOption) (*HostClassesUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HostClassesUpdateResponse)
	err := c.cc.Invoke(ctx, HostClasses_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostClassesClient) Delete(ctx context.Context, in *HostClassesDeleteRequest, opts ...grpc.CallOption) (*HostClassesDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HostClassesDeleteResponse)
	err := c.cc.Invoke(ctx, HostClasses_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HostClassesServer is the server API for HostClasses service.
// All implementations must embed UnimplementedHostClassesServer
// for forward compatibility.
type HostClassesServer interface {
	// Retrieves the list of host classes.
	List(context.Context, *HostClassesListRequest) (*HostClassesListResponse, error)
	// Retrieves the details of one specific host classes.
	Get(context.Context, *HostClassesGetRequest) (*HostClassesGetResponse, error)
	// Creates a new host class.
	//
	// This method isn't allowed for regular users, only for the system itself.
	Create(context.Context, *HostClassesCreateRequest) (*HostClassesCreateResponse, error)
	// Updates an existint host class.
	//
	// This method isn't allowed for regular users, only for the system itself.
	Update(context.Context, *HostClassesUpdateRequest) (*HostClassesUpdateResponse, error)
	// Delete a host class.
	//
	// This method isn't allowed for regular users, only for the system itself.
	Delete(context.Context, *HostClassesDeleteRequest) (*HostClassesDeleteResponse, error)
	mustEmbedUnimplementedHostClassesServer()
}

// UnimplementedHostClassesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHostClassesServer struct{}

func (UnimplementedHostClassesServer) List(context.Context, *HostClassesListRequest) (*HostClassesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedHostClassesServer) Get(context.Context, *HostClassesGetRequest) (*HostClassesGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedHostClassesServer) Create(context.Context, *HostClassesCreateRequest) (*HostClassesCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedHostClassesServer) Update(context.Context, *HostClassesUpdateRequest) (*HostClassesUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedHostClassesServer) Delete(context.Context, *HostClassesDeleteRequest) (*HostClassesDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedHostClassesServer) mustEmbedUnimplementedHostClassesServer() {}
func (UnimplementedHostClassesServer) testEmbeddedByValue()                     {}

// UnsafeHostClassesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HostClassesServer will
// result in compilation errors.
type UnsafeHostClassesServer interface {
	mustEmbedUnimplementedHostClassesServer()
}

func RegisterHostClassesServer(s grpc.ServiceRegistrar, srv HostClassesServer) {
	// If the following call pancis, it indicates UnimplementedHostClassesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HostClasses_ServiceDesc, srv)
}

func _HostClasses_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostClassesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostClassesServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostClasses_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostClassesServer).List(ctx, req.(*HostClassesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostClasses_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostClassesGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostClassesServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostClasses_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostClassesServer).Get(ctx, req.(*HostClassesGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostClasses_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostClassesCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostClassesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostClasses_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostClassesServer).Create(ctx, req.(*HostClassesCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostClasses_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostClassesUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostClassesServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostClasses_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostClassesServer).Update(ctx, req.(*HostClassesUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostClasses_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostClassesDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostClassesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostClasses_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostClassesServer).Delete(ctx, req.(*HostClassesDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HostClasses_ServiceDesc is the grpc.ServiceDesc for HostClasses service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HostClasses_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fulfillment.v1.HostClasses",
	HandlerType: (*HostClassesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _HostClasses_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _HostClasses_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _HostClasses_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _HostClasses_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _HostClasses_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fulfillment/v1/host_classes_service.proto",
}
