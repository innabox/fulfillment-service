//
// Copyright (c) 2025 Red Hat, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: private/v1/cluster_order_type.proto

//go:build !protoopaque

package privatev1

import (
	v1 "github.com/innabox/fulfillment-service/internal/api/shared/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ClusterOrderState int32

const (
	ClusterOrderState_CLUSTER_ORDER_STATE_UNSPECIFIED ClusterOrderState = 0
	ClusterOrderState_CLUSTER_ORDER_STATE_PROGRESSING ClusterOrderState = 1
	ClusterOrderState_CLUSTER_ORDER_STATE_FULFILLED   ClusterOrderState = 2
	ClusterOrderState_CLUSTER_ORDER_STATE_FAILED      ClusterOrderState = 3
)

// Enum value maps for ClusterOrderState.
var (
	ClusterOrderState_name = map[int32]string{
		0: "CLUSTER_ORDER_STATE_UNSPECIFIED",
		1: "CLUSTER_ORDER_STATE_PROGRESSING",
		2: "CLUSTER_ORDER_STATE_FULFILLED",
		3: "CLUSTER_ORDER_STATE_FAILED",
	}
	ClusterOrderState_value = map[string]int32{
		"CLUSTER_ORDER_STATE_UNSPECIFIED": 0,
		"CLUSTER_ORDER_STATE_PROGRESSING": 1,
		"CLUSTER_ORDER_STATE_FULFILLED":   2,
		"CLUSTER_ORDER_STATE_FAILED":      3,
	}
)

func (x ClusterOrderState) Enum() *ClusterOrderState {
	p := new(ClusterOrderState)
	*p = x
	return p
}

func (x ClusterOrderState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterOrderState) Descriptor() protoreflect.EnumDescriptor {
	return file_private_v1_cluster_order_type_proto_enumTypes[0].Descriptor()
}

func (ClusterOrderState) Type() protoreflect.EnumType {
	return &file_private_v1_cluster_order_type_proto_enumTypes[0]
}

func (x ClusterOrderState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type ClusterOrderConditionType int32

const (
	ClusterOrderConditionType_CLUSTER_ORDER_CONDITION_TYPE_UNSPECIFIED ClusterOrderConditionType = 0
	ClusterOrderConditionType_CLUSTER_ORDER_CONDITION_TYPE_ACCEPTED    ClusterOrderConditionType = 1
	ClusterOrderConditionType_CLUSTER_ORDER_CONDITION_TYPE_REJECTED    ClusterOrderConditionType = 2
	ClusterOrderConditionType_CLUSTER_ORDER_CONDITION_TYPE_CANCELED    ClusterOrderConditionType = 3
	ClusterOrderConditionType_CLUSTER_ORDER_CONDITION_TYPE_FULFILLED   ClusterOrderConditionType = 4
	ClusterOrderConditionType_CLUSTER_ORDER_CONDITION_TYPE_FAILED      ClusterOrderConditionType = 5
)

// Enum value maps for ClusterOrderConditionType.
var (
	ClusterOrderConditionType_name = map[int32]string{
		0: "CLUSTER_ORDER_CONDITION_TYPE_UNSPECIFIED",
		1: "CLUSTER_ORDER_CONDITION_TYPE_ACCEPTED",
		2: "CLUSTER_ORDER_CONDITION_TYPE_REJECTED",
		3: "CLUSTER_ORDER_CONDITION_TYPE_CANCELED",
		4: "CLUSTER_ORDER_CONDITION_TYPE_FULFILLED",
		5: "CLUSTER_ORDER_CONDITION_TYPE_FAILED",
	}
	ClusterOrderConditionType_value = map[string]int32{
		"CLUSTER_ORDER_CONDITION_TYPE_UNSPECIFIED": 0,
		"CLUSTER_ORDER_CONDITION_TYPE_ACCEPTED":    1,
		"CLUSTER_ORDER_CONDITION_TYPE_REJECTED":    2,
		"CLUSTER_ORDER_CONDITION_TYPE_CANCELED":    3,
		"CLUSTER_ORDER_CONDITION_TYPE_FULFILLED":   4,
		"CLUSTER_ORDER_CONDITION_TYPE_FAILED":      5,
	}
)

func (x ClusterOrderConditionType) Enum() *ClusterOrderConditionType {
	p := new(ClusterOrderConditionType)
	*p = x
	return p
}

func (x ClusterOrderConditionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterOrderConditionType) Descriptor() protoreflect.EnumDescriptor {
	return file_private_v1_cluster_order_type_proto_enumTypes[1].Descriptor()
}

func (ClusterOrderConditionType) Type() protoreflect.EnumType {
	return &file_private_v1_cluster_order_type_proto_enumTypes[1]
}

func (x ClusterOrderConditionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type ClusterOrder struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Public data.
	Id       string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Metadata *Metadata           `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *ClusterOrderSpec   `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
	Status   *ClusterOrderStatus `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	// Identifier of the hub that was selected for this order.
	HubId         string `protobuf:"bytes,5,opt,name=hub_id,json=hubId,proto3" json:"hub_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterOrder) Reset() {
	*x = ClusterOrder{}
	mi := &file_private_v1_cluster_order_type_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterOrder) ProtoMessage() {}

func (x *ClusterOrder) ProtoReflect() protoreflect.Message {
	mi := &file_private_v1_cluster_order_type_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ClusterOrder) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClusterOrder) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ClusterOrder) GetSpec() *ClusterOrderSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *ClusterOrder) GetStatus() *ClusterOrderStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ClusterOrder) GetHubId() string {
	if x != nil {
		return x.HubId
	}
	return ""
}

func (x *ClusterOrder) SetId(v string) {
	x.Id = v
}

func (x *ClusterOrder) SetMetadata(v *Metadata) {
	x.Metadata = v
}

func (x *ClusterOrder) SetSpec(v *ClusterOrderSpec) {
	x.Spec = v
}

func (x *ClusterOrder) SetStatus(v *ClusterOrderStatus) {
	x.Status = v
}

func (x *ClusterOrder) SetHubId(v string) {
	x.HubId = v
}

func (x *ClusterOrder) HasMetadata() bool {
	if x == nil {
		return false
	}
	return x.Metadata != nil
}

func (x *ClusterOrder) HasSpec() bool {
	if x == nil {
		return false
	}
	return x.Spec != nil
}

func (x *ClusterOrder) HasStatus() bool {
	if x == nil {
		return false
	}
	return x.Status != nil
}

func (x *ClusterOrder) ClearMetadata() {
	x.Metadata = nil
}

func (x *ClusterOrder) ClearSpec() {
	x.Spec = nil
}

func (x *ClusterOrder) ClearStatus() {
	x.Status = nil
}

type ClusterOrder_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Public data.
	Id       string
	Metadata *Metadata
	Spec     *ClusterOrderSpec
	Status   *ClusterOrderStatus
	// Identifier of the hub that was selected for this order.
	HubId string
}

func (b0 ClusterOrder_builder) Build() *ClusterOrder {
	m0 := &ClusterOrder{}
	b, x := &b0, m0
	_, _ = b, x
	x.Id = b.Id
	x.Metadata = b.Metadata
	x.Spec = b.Spec
	x.Status = b.Status
	x.HubId = b.HubId
	return m0
}

type ClusterOrderSpec struct {
	state              protoimpl.MessageState `protogen:"hybrid.v1"`
	TemplateId         string                 `protobuf:"bytes,1,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	TemplateParameters map[string]*anypb.Any  `protobuf:"bytes,2,rep,name=template_parameters,json=templateParameters,proto3" json:"template_parameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ClusterOrderSpec) Reset() {
	*x = ClusterOrderSpec{}
	mi := &file_private_v1_cluster_order_type_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterOrderSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterOrderSpec) ProtoMessage() {}

func (x *ClusterOrderSpec) ProtoReflect() protoreflect.Message {
	mi := &file_private_v1_cluster_order_type_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ClusterOrderSpec) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *ClusterOrderSpec) GetTemplateParameters() map[string]*anypb.Any {
	if x != nil {
		return x.TemplateParameters
	}
	return nil
}

func (x *ClusterOrderSpec) SetTemplateId(v string) {
	x.TemplateId = v
}

func (x *ClusterOrderSpec) SetTemplateParameters(v map[string]*anypb.Any) {
	x.TemplateParameters = v
}

type ClusterOrderSpec_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	TemplateId         string
	TemplateParameters map[string]*anypb.Any
}

func (b0 ClusterOrderSpec_builder) Build() *ClusterOrderSpec {
	m0 := &ClusterOrderSpec{}
	b, x := &b0, m0
	_, _ = b, x
	x.TemplateId = b.TemplateId
	x.TemplateParameters = b.TemplateParameters
	return m0
}

type ClusterOrderStatus struct {
	state         protoimpl.MessageState   `protogen:"hybrid.v1"`
	State         ClusterOrderState        `protobuf:"varint,1,opt,name=state,proto3,enum=private.v1.ClusterOrderState" json:"state,omitempty"`
	Conditions    []*ClusterOrderCondition `protobuf:"bytes,2,rep,name=conditions,proto3" json:"conditions,omitempty"`
	ClusterId     string                   `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterOrderStatus) Reset() {
	*x = ClusterOrderStatus{}
	mi := &file_private_v1_cluster_order_type_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterOrderStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterOrderStatus) ProtoMessage() {}

func (x *ClusterOrderStatus) ProtoReflect() protoreflect.Message {
	mi := &file_private_v1_cluster_order_type_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ClusterOrderStatus) GetState() ClusterOrderState {
	if x != nil {
		return x.State
	}
	return ClusterOrderState_CLUSTER_ORDER_STATE_UNSPECIFIED
}

func (x *ClusterOrderStatus) GetConditions() []*ClusterOrderCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *ClusterOrderStatus) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ClusterOrderStatus) SetState(v ClusterOrderState) {
	x.State = v
}

func (x *ClusterOrderStatus) SetConditions(v []*ClusterOrderCondition) {
	x.Conditions = v
}

func (x *ClusterOrderStatus) SetClusterId(v string) {
	x.ClusterId = v
}

type ClusterOrderStatus_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	State      ClusterOrderState
	Conditions []*ClusterOrderCondition
	ClusterId  string
}

func (b0 ClusterOrderStatus_builder) Build() *ClusterOrderStatus {
	m0 := &ClusterOrderStatus{}
	b, x := &b0, m0
	_, _ = b, x
	x.State = b.State
	x.Conditions = b.Conditions
	x.ClusterId = b.ClusterId
	return m0
}

type ClusterOrderCondition struct {
	state              protoimpl.MessageState    `protogen:"hybrid.v1"`
	Type               ClusterOrderConditionType `protobuf:"varint,1,opt,name=type,proto3,enum=private.v1.ClusterOrderConditionType" json:"type,omitempty"`
	Status             v1.ConditionStatus        `protobuf:"varint,2,opt,name=status,proto3,enum=shared.v1.ConditionStatus" json:"status,omitempty"`
	LastTransitionTime *timestamppb.Timestamp    `protobuf:"bytes,3,opt,name=last_transition_time,json=lastTransitionTime,proto3" json:"last_transition_time,omitempty"`
	Reason             *string                   `protobuf:"bytes,4,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
	Message            *string                   `protobuf:"bytes,5,opt,name=message,proto3,oneof" json:"message,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ClusterOrderCondition) Reset() {
	*x = ClusterOrderCondition{}
	mi := &file_private_v1_cluster_order_type_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterOrderCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterOrderCondition) ProtoMessage() {}

func (x *ClusterOrderCondition) ProtoReflect() protoreflect.Message {
	mi := &file_private_v1_cluster_order_type_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ClusterOrderCondition) GetType() ClusterOrderConditionType {
	if x != nil {
		return x.Type
	}
	return ClusterOrderConditionType_CLUSTER_ORDER_CONDITION_TYPE_UNSPECIFIED
}

func (x *ClusterOrderCondition) GetStatus() v1.ConditionStatus {
	if x != nil {
		return x.Status
	}
	return v1.ConditionStatus(0)
}

func (x *ClusterOrderCondition) GetLastTransitionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastTransitionTime
	}
	return nil
}

func (x *ClusterOrderCondition) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *ClusterOrderCondition) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *ClusterOrderCondition) SetType(v ClusterOrderConditionType) {
	x.Type = v
}

func (x *ClusterOrderCondition) SetStatus(v v1.ConditionStatus) {
	x.Status = v
}

func (x *ClusterOrderCondition) SetLastTransitionTime(v *timestamppb.Timestamp) {
	x.LastTransitionTime = v
}

func (x *ClusterOrderCondition) SetReason(v string) {
	x.Reason = &v
}

func (x *ClusterOrderCondition) SetMessage(v string) {
	x.Message = &v
}

func (x *ClusterOrderCondition) HasLastTransitionTime() bool {
	if x == nil {
		return false
	}
	return x.LastTransitionTime != nil
}

func (x *ClusterOrderCondition) HasReason() bool {
	if x == nil {
		return false
	}
	return x.Reason != nil
}

func (x *ClusterOrderCondition) HasMessage() bool {
	if x == nil {
		return false
	}
	return x.Message != nil
}

func (x *ClusterOrderCondition) ClearLastTransitionTime() {
	x.LastTransitionTime = nil
}

func (x *ClusterOrderCondition) ClearReason() {
	x.Reason = nil
}

func (x *ClusterOrderCondition) ClearMessage() {
	x.Message = nil
}

type ClusterOrderCondition_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Type               ClusterOrderConditionType
	Status             v1.ConditionStatus
	LastTransitionTime *timestamppb.Timestamp
	Reason             *string
	Message            *string
}

func (b0 ClusterOrderCondition_builder) Build() *ClusterOrderCondition {
	m0 := &ClusterOrderCondition{}
	b, x := &b0, m0
	_, _ = b, x
	x.Type = b.Type
	x.Status = b.Status
	x.LastTransitionTime = b.LastTransitionTime
	x.Reason = b.Reason
	x.Message = b.Message
	return m0
}

var File_private_v1_cluster_order_type_proto protoreflect.FileDescriptor

var file_private_v1_cluster_order_type_proto_rawDesc = string([]byte{
	0x0a, 0x23, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd1, 0x01, 0x0a, 0x0c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x15, 0x0a, 0x06, 0x68, 0x75, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x68, 0x75, 0x62, 0x49, 0x64, 0x22, 0xf7, 0x01, 0x0a, 0x10, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x65,
	0x0a, 0x13, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x12, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x5b, 0x0a, 0x17, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xab, 0x01, 0x0a, 0x12, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x41,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x22, 0xa7, 0x02, 0x0a, 0x15, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4c, 0x0a, 0x14, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2a, 0xa0, 0x01, 0x0a, 0x11, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52,
	0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f,
	0x47, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4c,
	0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x46, 0x55, 0x4c, 0x46, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1e, 0x0a,
	0x1a, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x9f, 0x02,
	0x0a, 0x19, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x28, 0x43,
	0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e,
	0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x43, 0x4c, 0x55,
	0x53, 0x54, 0x45, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x29, 0x0a, 0x25, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x2a, 0x0a, 0x26, 0x43, 0x4c,
	0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x44,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x55, 0x4c, 0x46, 0x49,
	0x4c, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x27, 0x0a, 0x23, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45,
	0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x42,
	0xbc, 0x01, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e,
	0x76, 0x31, 0x42, 0x15, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x48, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x6e, 0x61, 0x62, 0x6f, 0x78, 0x2f,
	0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x50, 0x58, 0x58, 0xaa, 0x02, 0x0a, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0b, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x17, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x5f, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x0b, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var file_private_v1_cluster_order_type_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_private_v1_cluster_order_type_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_private_v1_cluster_order_type_proto_goTypes = []any{
	(ClusterOrderState)(0),         // 0: private.v1.ClusterOrderState
	(ClusterOrderConditionType)(0), // 1: private.v1.ClusterOrderConditionType
	(*ClusterOrder)(nil),           // 2: private.v1.ClusterOrder
	(*ClusterOrderSpec)(nil),       // 3: private.v1.ClusterOrderSpec
	(*ClusterOrderStatus)(nil),     // 4: private.v1.ClusterOrderStatus
	(*ClusterOrderCondition)(nil),  // 5: private.v1.ClusterOrderCondition
	nil,                            // 6: private.v1.ClusterOrderSpec.TemplateParametersEntry
	(*Metadata)(nil),               // 7: private.v1.Metadata
	(v1.ConditionStatus)(0),        // 8: shared.v1.ConditionStatus
	(*timestamppb.Timestamp)(nil),  // 9: google.protobuf.Timestamp
	(*anypb.Any)(nil),              // 10: google.protobuf.Any
}
var file_private_v1_cluster_order_type_proto_depIdxs = []int32{
	7,  // 0: private.v1.ClusterOrder.metadata:type_name -> private.v1.Metadata
	3,  // 1: private.v1.ClusterOrder.spec:type_name -> private.v1.ClusterOrderSpec
	4,  // 2: private.v1.ClusterOrder.status:type_name -> private.v1.ClusterOrderStatus
	6,  // 3: private.v1.ClusterOrderSpec.template_parameters:type_name -> private.v1.ClusterOrderSpec.TemplateParametersEntry
	0,  // 4: private.v1.ClusterOrderStatus.state:type_name -> private.v1.ClusterOrderState
	5,  // 5: private.v1.ClusterOrderStatus.conditions:type_name -> private.v1.ClusterOrderCondition
	1,  // 6: private.v1.ClusterOrderCondition.type:type_name -> private.v1.ClusterOrderConditionType
	8,  // 7: private.v1.ClusterOrderCondition.status:type_name -> shared.v1.ConditionStatus
	9,  // 8: private.v1.ClusterOrderCondition.last_transition_time:type_name -> google.protobuf.Timestamp
	10, // 9: private.v1.ClusterOrderSpec.TemplateParametersEntry.value:type_name -> google.protobuf.Any
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_private_v1_cluster_order_type_proto_init() }
func file_private_v1_cluster_order_type_proto_init() {
	if File_private_v1_cluster_order_type_proto != nil {
		return
	}
	file_private_v1_metadata_type_proto_init()
	file_private_v1_cluster_order_type_proto_msgTypes[3].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_private_v1_cluster_order_type_proto_rawDesc), len(file_private_v1_cluster_order_type_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_private_v1_cluster_order_type_proto_goTypes,
		DependencyIndexes: file_private_v1_cluster_order_type_proto_depIdxs,
		EnumInfos:         file_private_v1_cluster_order_type_proto_enumTypes,
		MessageInfos:      file_private_v1_cluster_order_type_proto_msgTypes,
	}.Build()
	File_private_v1_cluster_order_type_proto = out.File
	file_private_v1_cluster_order_type_proto_goTypes = nil
	file_private_v1_cluster_order_type_proto_depIdxs = nil
}
