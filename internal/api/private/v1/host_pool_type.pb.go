//
// Copyright (c) 2025 Red Hat, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: private/v1/host_pool_type.proto

//go:build !protoopaque

package privatev1

import (
	v1 "github.com/innabox/fulfillment-service/internal/api/shared/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents the overall state of a host pool.
type HostPoolState int32

const (
	HostPoolState_HOST_POOL_STATE_UNSPECIFIED HostPoolState = 0
	HostPoolState_HOST_POOL_STATE_PROGRESSING HostPoolState = 1
	HostPoolState_HOST_POOL_STATE_READY       HostPoolState = 2
	HostPoolState_HOST_POOL_STATE_FAILED      HostPoolState = 3
)

// Enum value maps for HostPoolState.
var (
	HostPoolState_name = map[int32]string{
		0: "HOST_POOL_STATE_UNSPECIFIED",
		1: "HOST_POOL_STATE_PROGRESSING",
		2: "HOST_POOL_STATE_READY",
		3: "HOST_POOL_STATE_FAILED",
	}
	HostPoolState_value = map[string]int32{
		"HOST_POOL_STATE_UNSPECIFIED": 0,
		"HOST_POOL_STATE_PROGRESSING": 1,
		"HOST_POOL_STATE_READY":       2,
		"HOST_POOL_STATE_FAILED":      3,
	}
)

func (x HostPoolState) Enum() *HostPoolState {
	p := new(HostPoolState)
	*p = x
	return p
}

func (x HostPoolState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HostPoolState) Descriptor() protoreflect.EnumDescriptor {
	return file_private_v1_host_pool_type_proto_enumTypes[0].Descriptor()
}

func (HostPoolState) Type() protoreflect.EnumType {
	return &file_private_v1_host_pool_type_proto_enumTypes[0]
}

func (x HostPoolState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Types of conditions used to describe the status of host pool.
type HostPoolConditionType int32

const (
	HostPoolConditionType_HOST_POOL_CONDITION_TYPE_UNSPECIFIED HostPoolConditionType = 0
	HostPoolConditionType_HOST_POOL_CONDITION_TYPE_PROGRESSING HostPoolConditionType = 1
	HostPoolConditionType_HOST_POOL_CONDITION_TYPE_READY       HostPoolConditionType = 2
	HostPoolConditionType_HOST_POOL_CONDITION_TYPE_FAILED      HostPoolConditionType = 3
	HostPoolConditionType_HOST_POOL_CONDITION_TYPE_DEGRADED    HostPoolConditionType = 4
)

// Enum value maps for HostPoolConditionType.
var (
	HostPoolConditionType_name = map[int32]string{
		0: "HOST_POOL_CONDITION_TYPE_UNSPECIFIED",
		1: "HOST_POOL_CONDITION_TYPE_PROGRESSING",
		2: "HOST_POOL_CONDITION_TYPE_READY",
		3: "HOST_POOL_CONDITION_TYPE_FAILED",
		4: "HOST_POOL_CONDITION_TYPE_DEGRADED",
	}
	HostPoolConditionType_value = map[string]int32{
		"HOST_POOL_CONDITION_TYPE_UNSPECIFIED": 0,
		"HOST_POOL_CONDITION_TYPE_PROGRESSING": 1,
		"HOST_POOL_CONDITION_TYPE_READY":       2,
		"HOST_POOL_CONDITION_TYPE_FAILED":      3,
		"HOST_POOL_CONDITION_TYPE_DEGRADED":    4,
	}
)

func (x HostPoolConditionType) Enum() *HostPoolConditionType {
	p := new(HostPoolConditionType)
	*p = x
	return p
}

func (x HostPoolConditionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HostPoolConditionType) Descriptor() protoreflect.EnumDescriptor {
	return file_private_v1_host_pool_type_proto_enumTypes[1].Descriptor()
}

func (HostPoolConditionType) Type() protoreflect.EnumType {
	return &file_private_v1_host_pool_type_proto_enumTypes[1]
}

func (x HostPoolConditionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Contains the details about the host pool that are available only for the system.
type HostPool struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Public data.
	Id            string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Metadata      *Metadata       `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec          *HostPoolSpec   `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
	Status        *HostPoolStatus `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HostPool) Reset() {
	*x = HostPool{}
	mi := &file_private_v1_host_pool_type_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HostPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostPool) ProtoMessage() {}

func (x *HostPool) ProtoReflect() protoreflect.Message {
	mi := &file_private_v1_host_pool_type_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *HostPool) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HostPool) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *HostPool) GetSpec() *HostPoolSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *HostPool) GetStatus() *HostPoolStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *HostPool) SetId(v string) {
	x.Id = v
}

func (x *HostPool) SetMetadata(v *Metadata) {
	x.Metadata = v
}

func (x *HostPool) SetSpec(v *HostPoolSpec) {
	x.Spec = v
}

func (x *HostPool) SetStatus(v *HostPoolStatus) {
	x.Status = v
}

func (x *HostPool) HasMetadata() bool {
	if x == nil {
		return false
	}
	return x.Metadata != nil
}

func (x *HostPool) HasSpec() bool {
	if x == nil {
		return false
	}
	return x.Spec != nil
}

func (x *HostPool) HasStatus() bool {
	if x == nil {
		return false
	}
	return x.Status != nil
}

func (x *HostPool) ClearMetadata() {
	x.Metadata = nil
}

func (x *HostPool) ClearSpec() {
	x.Spec = nil
}

func (x *HostPool) ClearStatus() {
	x.Status = nil
}

type HostPool_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Public data.
	Id       string
	Metadata *Metadata
	Spec     *HostPoolSpec
	Status   *HostPoolStatus
}

func (b0 HostPool_builder) Build() *HostPool {
	m0 := &HostPool{}
	b, x := &b0, m0
	_, _ = b, x
	x.Id = b.Id
	x.Metadata = b.Metadata
	x.Spec = b.Spec
	x.Status = b.Status
	return m0
}

type HostPoolSpec struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Copies of the public fields.
	HostSets      map[string]*HostPoolHostSet `protobuf:"bytes,1,rep,name=host_sets,json=hostSets,proto3" json:"host_sets,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HostPoolSpec) Reset() {
	*x = HostPoolSpec{}
	mi := &file_private_v1_host_pool_type_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HostPoolSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostPoolSpec) ProtoMessage() {}

func (x *HostPoolSpec) ProtoReflect() protoreflect.Message {
	mi := &file_private_v1_host_pool_type_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *HostPoolSpec) GetHostSets() map[string]*HostPoolHostSet {
	if x != nil {
		return x.HostSets
	}
	return nil
}

func (x *HostPoolSpec) SetHostSets(v map[string]*HostPoolHostSet) {
	x.HostSets = v
}

type HostPoolSpec_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Copies of the public fields.
	HostSets map[string]*HostPoolHostSet
}

func (b0 HostPoolSpec_builder) Build() *HostPoolSpec {
	m0 := &HostPoolSpec{}
	b, x := &b0, m0
	_, _ = b, x
	x.HostSets = b.HostSets
	return m0
}

type HostPoolStatus struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Copies of the public fields.
	State      HostPoolState               `protobuf:"varint,1,opt,name=state,proto3,enum=private.v1.HostPoolState" json:"state,omitempty"`
	Hosts      []string                    `protobuf:"bytes,2,rep,name=hosts,proto3" json:"hosts,omitempty"`
	Conditions []*HostPoolCondition        `protobuf:"bytes,3,rep,name=conditions,proto3" json:"conditions,omitempty"`
	HostSets   map[string]*HostPoolHostSet `protobuf:"bytes,4,rep,name=host_sets,json=hostSets,proto3" json:"host_sets,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Identifier of the hub that was selected for this cluster.
	Hub           string `protobuf:"bytes,5,opt,name=hub,proto3" json:"hub,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HostPoolStatus) Reset() {
	*x = HostPoolStatus{}
	mi := &file_private_v1_host_pool_type_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HostPoolStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostPoolStatus) ProtoMessage() {}

func (x *HostPoolStatus) ProtoReflect() protoreflect.Message {
	mi := &file_private_v1_host_pool_type_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *HostPoolStatus) GetState() HostPoolState {
	if x != nil {
		return x.State
	}
	return HostPoolState_HOST_POOL_STATE_UNSPECIFIED
}

func (x *HostPoolStatus) GetHosts() []string {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *HostPoolStatus) GetConditions() []*HostPoolCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *HostPoolStatus) GetHostSets() map[string]*HostPoolHostSet {
	if x != nil {
		return x.HostSets
	}
	return nil
}

func (x *HostPoolStatus) GetHub() string {
	if x != nil {
		return x.Hub
	}
	return ""
}

func (x *HostPoolStatus) SetState(v HostPoolState) {
	x.State = v
}

func (x *HostPoolStatus) SetHosts(v []string) {
	x.Hosts = v
}

func (x *HostPoolStatus) SetConditions(v []*HostPoolCondition) {
	x.Conditions = v
}

func (x *HostPoolStatus) SetHostSets(v map[string]*HostPoolHostSet) {
	x.HostSets = v
}

func (x *HostPoolStatus) SetHub(v string) {
	x.Hub = v
}

type HostPoolStatus_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Copies of the public fields.
	State      HostPoolState
	Hosts      []string
	Conditions []*HostPoolCondition
	HostSets   map[string]*HostPoolHostSet
	// Identifier of the hub that was selected for this cluster.
	Hub string
}

func (b0 HostPoolStatus_builder) Build() *HostPoolStatus {
	m0 := &HostPoolStatus{}
	b, x := &b0, m0
	_, _ = b, x
	x.State = b.State
	x.Hosts = b.Hosts
	x.Conditions = b.Conditions
	x.HostSets = b.HostSets
	x.Hub = b.Hub
	return m0
}

// Contains the details of a host pool condition.
type HostPoolCondition struct {
	state              protoimpl.MessageState `protogen:"hybrid.v1"`
	Type               HostPoolConditionType  `protobuf:"varint,1,opt,name=type,proto3,enum=private.v1.HostPoolConditionType" json:"type,omitempty"`
	Status             v1.ConditionStatus     `protobuf:"varint,2,opt,name=status,proto3,enum=shared.v1.ConditionStatus" json:"status,omitempty"`
	LastTransitionTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_transition_time,json=lastTransitionTime,proto3" json:"last_transition_time,omitempty"`
	Reason             *string                `protobuf:"bytes,4,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
	Message            *string                `protobuf:"bytes,5,opt,name=message,proto3,oneof" json:"message,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *HostPoolCondition) Reset() {
	*x = HostPoolCondition{}
	mi := &file_private_v1_host_pool_type_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HostPoolCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostPoolCondition) ProtoMessage() {}

func (x *HostPoolCondition) ProtoReflect() protoreflect.Message {
	mi := &file_private_v1_host_pool_type_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *HostPoolCondition) GetType() HostPoolConditionType {
	if x != nil {
		return x.Type
	}
	return HostPoolConditionType_HOST_POOL_CONDITION_TYPE_UNSPECIFIED
}

func (x *HostPoolCondition) GetStatus() v1.ConditionStatus {
	if x != nil {
		return x.Status
	}
	return v1.ConditionStatus(0)
}

func (x *HostPoolCondition) GetLastTransitionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastTransitionTime
	}
	return nil
}

func (x *HostPoolCondition) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *HostPoolCondition) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *HostPoolCondition) SetType(v HostPoolConditionType) {
	x.Type = v
}

func (x *HostPoolCondition) SetStatus(v v1.ConditionStatus) {
	x.Status = v
}

func (x *HostPoolCondition) SetLastTransitionTime(v *timestamppb.Timestamp) {
	x.LastTransitionTime = v
}

func (x *HostPoolCondition) SetReason(v string) {
	x.Reason = &v
}

func (x *HostPoolCondition) SetMessage(v string) {
	x.Message = &v
}

func (x *HostPoolCondition) HasLastTransitionTime() bool {
	if x == nil {
		return false
	}
	return x.LastTransitionTime != nil
}

func (x *HostPoolCondition) HasReason() bool {
	if x == nil {
		return false
	}
	return x.Reason != nil
}

func (x *HostPoolCondition) HasMessage() bool {
	if x == nil {
		return false
	}
	return x.Message != nil
}

func (x *HostPoolCondition) ClearLastTransitionTime() {
	x.LastTransitionTime = nil
}

func (x *HostPoolCondition) ClearReason() {
	x.Reason = nil
}

func (x *HostPoolCondition) ClearMessage() {
	x.Message = nil
}

type HostPoolCondition_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Type               HostPoolConditionType
	Status             v1.ConditionStatus
	LastTransitionTime *timestamppb.Timestamp
	Reason             *string
	Message            *string
}

func (b0 HostPoolCondition_builder) Build() *HostPoolCondition {
	m0 := &HostPoolCondition{}
	b, x := &b0, m0
	_, _ = b, x
	x.Type = b.Type
	x.Status = b.Status
	x.LastTransitionTime = b.LastTransitionTime
	x.Reason = b.Reason
	x.Message = b.Message
	return m0
}

// Contains the details of a host set within a host pool.
type HostPoolHostSet struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Host class identifier for hosts in this set.
	HostClass string `protobuf:"bytes,1,opt,name=host_class,json=hostClass,proto3" json:"host_class,omitempty"`
	// Number of hosts for this host set.
	Size          int32 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HostPoolHostSet) Reset() {
	*x = HostPoolHostSet{}
	mi := &file_private_v1_host_pool_type_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HostPoolHostSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostPoolHostSet) ProtoMessage() {}

func (x *HostPoolHostSet) ProtoReflect() protoreflect.Message {
	mi := &file_private_v1_host_pool_type_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *HostPoolHostSet) GetHostClass() string {
	if x != nil {
		return x.HostClass
	}
	return ""
}

func (x *HostPoolHostSet) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *HostPoolHostSet) SetHostClass(v string) {
	x.HostClass = v
}

func (x *HostPoolHostSet) SetSize(v int32) {
	x.Size = v
}

type HostPoolHostSet_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Host class identifier for hosts in this set.
	HostClass string
	// Number of hosts for this host set.
	Size int32
}

func (b0 HostPoolHostSet_builder) Build() *HostPoolHostSet {
	m0 := &HostPoolHostSet{}
	b, x := &b0, m0
	_, _ = b, x
	x.HostClass = b.HostClass
	x.Size = b.Size
	return m0
}

var File_private_v1_host_pool_type_proto protoreflect.FileDescriptor

var file_private_v1_host_pool_type_proto_rawDesc = string([]byte{
	0x0a, 0x1f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x6f, 0x73,
	0x74, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xae, 0x01, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f,
	0x6f, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xad, 0x01, 0x0a, 0x0c, 0x48, 0x6f, 0x73, 0x74, 0x50,
	0x6f, 0x6f, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x12, 0x43, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x6f, 0x6c,
	0x53, 0x70, 0x65, 0x63, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x74, 0x73, 0x1a, 0x58, 0x0a, 0x0d,
	0x48, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74,
	0x50, 0x6f, 0x6f, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc9, 0x02, 0x0a, 0x0e, 0x48, 0x6f, 0x73, 0x74, 0x50,
	0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6f,
	0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73,
	0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x45, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x48,
	0x6f, 0x73, 0x74, 0x53, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x53, 0x65, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x75, 0x62, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x68, 0x75, 0x62, 0x1a, 0x58, 0x0a, 0x0d, 0x48, 0x6f, 0x73, 0x74,
	0x53, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x6f, 0x6c,
	0x48, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x9f, 0x02, 0x0a, 0x11, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x4c, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x6c,
	0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x44, 0x0a, 0x0f, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x6f, 0x6c,
	0x48, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x6f, 0x73,
	0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x2a, 0x88, 0x01, 0x0a, 0x0d, 0x48,
	0x6f, 0x73, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x1b,
	0x48, 0x4f, 0x53, 0x54, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a,
	0x1b, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x19,
	0x0a, 0x15, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x48, 0x4f, 0x53,
	0x54, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x03, 0x2a, 0xdb, 0x01, 0x0a, 0x15, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f,
	0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x28, 0x0a, 0x24, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x43, 0x4f, 0x4e,
	0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x48, 0x4f, 0x53,
	0x54, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x50, 0x4f, 0x4f, 0x4c,
	0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x48, 0x4f, 0x53, 0x54, 0x5f,
	0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21,
	0x48, 0x4f, 0x53, 0x54, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x47, 0x52, 0x41, 0x44, 0x45,
	0x44, 0x10, 0x04, 0x42, 0xb8, 0x01, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x11, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x6f, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x48, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x6e, 0x61, 0x62, 0x6f, 0x78, 0x2f,
	0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x50, 0x58, 0x58, 0xaa, 0x02, 0x0a, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0b, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x17, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x5f, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x0b, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var file_private_v1_host_pool_type_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_private_v1_host_pool_type_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_private_v1_host_pool_type_proto_goTypes = []any{
	(HostPoolState)(0),            // 0: private.v1.HostPoolState
	(HostPoolConditionType)(0),    // 1: private.v1.HostPoolConditionType
	(*HostPool)(nil),              // 2: private.v1.HostPool
	(*HostPoolSpec)(nil),          // 3: private.v1.HostPoolSpec
	(*HostPoolStatus)(nil),        // 4: private.v1.HostPoolStatus
	(*HostPoolCondition)(nil),     // 5: private.v1.HostPoolCondition
	(*HostPoolHostSet)(nil),       // 6: private.v1.HostPoolHostSet
	nil,                           // 7: private.v1.HostPoolSpec.HostSetsEntry
	nil,                           // 8: private.v1.HostPoolStatus.HostSetsEntry
	(*Metadata)(nil),              // 9: private.v1.Metadata
	(v1.ConditionStatus)(0),       // 10: shared.v1.ConditionStatus
	(*timestamppb.Timestamp)(nil), // 11: google.protobuf.Timestamp
}
var file_private_v1_host_pool_type_proto_depIdxs = []int32{
	9,  // 0: private.v1.HostPool.metadata:type_name -> private.v1.Metadata
	3,  // 1: private.v1.HostPool.spec:type_name -> private.v1.HostPoolSpec
	4,  // 2: private.v1.HostPool.status:type_name -> private.v1.HostPoolStatus
	7,  // 3: private.v1.HostPoolSpec.host_sets:type_name -> private.v1.HostPoolSpec.HostSetsEntry
	0,  // 4: private.v1.HostPoolStatus.state:type_name -> private.v1.HostPoolState
	5,  // 5: private.v1.HostPoolStatus.conditions:type_name -> private.v1.HostPoolCondition
	8,  // 6: private.v1.HostPoolStatus.host_sets:type_name -> private.v1.HostPoolStatus.HostSetsEntry
	1,  // 7: private.v1.HostPoolCondition.type:type_name -> private.v1.HostPoolConditionType
	10, // 8: private.v1.HostPoolCondition.status:type_name -> shared.v1.ConditionStatus
	11, // 9: private.v1.HostPoolCondition.last_transition_time:type_name -> google.protobuf.Timestamp
	6,  // 10: private.v1.HostPoolSpec.HostSetsEntry.value:type_name -> private.v1.HostPoolHostSet
	6,  // 11: private.v1.HostPoolStatus.HostSetsEntry.value:type_name -> private.v1.HostPoolHostSet
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_private_v1_host_pool_type_proto_init() }
func file_private_v1_host_pool_type_proto_init() {
	if File_private_v1_host_pool_type_proto != nil {
		return
	}
	file_private_v1_metadata_type_proto_init()
	file_private_v1_host_pool_type_proto_msgTypes[3].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_private_v1_host_pool_type_proto_rawDesc), len(file_private_v1_host_pool_type_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_private_v1_host_pool_type_proto_goTypes,
		DependencyIndexes: file_private_v1_host_pool_type_proto_depIdxs,
		EnumInfos:         file_private_v1_host_pool_type_proto_enumTypes,
		MessageInfos:      file_private_v1_host_pool_type_proto_msgTypes,
	}.Build()
	File_private_v1_host_pool_type_proto = out.File
	file_private_v1_host_pool_type_proto_goTypes = nil
	file_private_v1_host_pool_type_proto_depIdxs = nil
}
