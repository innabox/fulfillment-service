//
// Copyright (c) 2025 Red Hat, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: private/v1/host_pools_service.proto

package privatev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HostPools_List_FullMethodName   = "/private.v1.HostPools/List"
	HostPools_Get_FullMethodName    = "/private.v1.HostPools/Get"
	HostPools_Create_FullMethodName = "/private.v1.HostPools/Create"
	HostPools_Delete_FullMethodName = "/private.v1.HostPools/Delete"
	HostPools_Update_FullMethodName = "/private.v1.HostPools/Update"
)

// HostPoolsClient is the client API for HostPools service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HostPoolsClient interface {
	List(ctx context.Context, in *HostPoolsListRequest, opts ...grpc.CallOption) (*HostPoolsListResponse, error)
	Get(ctx context.Context, in *HostPoolsGetRequest, opts ...grpc.CallOption) (*HostPoolsGetResponse, error)
	Create(ctx context.Context, in *HostPoolsCreateRequest, opts ...grpc.CallOption) (*HostPoolsCreateResponse, error)
	Delete(ctx context.Context, in *HostPoolsDeleteRequest, opts ...grpc.CallOption) (*HostPoolsDeleteResponse, error)
	Update(ctx context.Context, in *HostPoolsUpdateRequest, opts ...grpc.CallOption) (*HostPoolsUpdateResponse, error)
}

type hostPoolsClient struct {
	cc grpc.ClientConnInterface
}

func NewHostPoolsClient(cc grpc.ClientConnInterface) HostPoolsClient {
	return &hostPoolsClient{cc}
}

func (c *hostPoolsClient) List(ctx context.Context, in *HostPoolsListRequest, opts ...grpc.CallOption) (*HostPoolsListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HostPoolsListResponse)
	err := c.cc.Invoke(ctx, HostPools_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostPoolsClient) Get(ctx context.Context, in *HostPoolsGetRequest, opts ...grpc.CallOption) (*HostPoolsGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HostPoolsGetResponse)
	err := c.cc.Invoke(ctx, HostPools_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostPoolsClient) Create(ctx context.Context, in *HostPoolsCreateRequest, opts ...grpc.CallOption) (*HostPoolsCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HostPoolsCreateResponse)
	err := c.cc.Invoke(ctx, HostPools_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostPoolsClient) Delete(ctx context.Context, in *HostPoolsDeleteRequest, opts ...grpc.CallOption) (*HostPoolsDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HostPoolsDeleteResponse)
	err := c.cc.Invoke(ctx, HostPools_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostPoolsClient) Update(ctx context.Context, in *HostPoolsUpdateRequest, opts ...grpc.CallOption) (*HostPoolsUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HostPoolsUpdateResponse)
	err := c.cc.Invoke(ctx, HostPools_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HostPoolsServer is the server API for HostPools service.
// All implementations must embed UnimplementedHostPoolsServer
// for forward compatibility.
type HostPoolsServer interface {
	List(context.Context, *HostPoolsListRequest) (*HostPoolsListResponse, error)
	Get(context.Context, *HostPoolsGetRequest) (*HostPoolsGetResponse, error)
	Create(context.Context, *HostPoolsCreateRequest) (*HostPoolsCreateResponse, error)
	Delete(context.Context, *HostPoolsDeleteRequest) (*HostPoolsDeleteResponse, error)
	Update(context.Context, *HostPoolsUpdateRequest) (*HostPoolsUpdateResponse, error)
	mustEmbedUnimplementedHostPoolsServer()
}

// UnimplementedHostPoolsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHostPoolsServer struct{}

func (UnimplementedHostPoolsServer) List(context.Context, *HostPoolsListRequest) (*HostPoolsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedHostPoolsServer) Get(context.Context, *HostPoolsGetRequest) (*HostPoolsGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedHostPoolsServer) Create(context.Context, *HostPoolsCreateRequest) (*HostPoolsCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedHostPoolsServer) Delete(context.Context, *HostPoolsDeleteRequest) (*HostPoolsDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedHostPoolsServer) Update(context.Context, *HostPoolsUpdateRequest) (*HostPoolsUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedHostPoolsServer) mustEmbedUnimplementedHostPoolsServer() {}
func (UnimplementedHostPoolsServer) testEmbeddedByValue()                   {}

// UnsafeHostPoolsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HostPoolsServer will
// result in compilation errors.
type UnsafeHostPoolsServer interface {
	mustEmbedUnimplementedHostPoolsServer()
}

func RegisterHostPoolsServer(s grpc.ServiceRegistrar, srv HostPoolsServer) {
	// If the following call pancis, it indicates UnimplementedHostPoolsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HostPools_ServiceDesc, srv)
}

func _HostPools_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostPoolsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostPoolsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostPools_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostPoolsServer).List(ctx, req.(*HostPoolsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostPools_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostPoolsGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostPoolsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostPools_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostPoolsServer).Get(ctx, req.(*HostPoolsGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostPools_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostPoolsCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostPoolsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostPools_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostPoolsServer).Create(ctx, req.(*HostPoolsCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostPools_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostPoolsDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostPoolsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostPools_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostPoolsServer).Delete(ctx, req.(*HostPoolsDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostPools_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostPoolsUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostPoolsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostPools_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostPoolsServer).Update(ctx, req.(*HostPoolsUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HostPools_ServiceDesc is the grpc.ServiceDesc for HostPools service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HostPools_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "private.v1.HostPools",
	HandlerType: (*HostPoolsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _HostPools_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _HostPools_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _HostPools_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _HostPools_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _HostPools_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "private/v1/host_pools_service.proto",
}
